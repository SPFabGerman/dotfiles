#!/bin/python3

# Draws a short overlay to visualize the bspwm tree.

# === CONFIG ===
node_radius = 10
node_color = 0x80ffff00 # Format: ARGB

line_color = 0x80000000
line_width = 2

visibility_duration = 1.0

# === imports ===

import json
import subprocess
import sys
from time import sleep

from Xlib import X, display
from Xlib.ext import shape

# === OVERLAY Window ===

dpy = display.Display()
screen = dpy.screen()
root = screen.root

# Check for extension
if not dpy.has_extension('SHAPE'):
    sys.stderr.write('%s: server does not have SHAPE extension\n' % sys.argv[1])
    sys.exit(1)

def find_visualid(depth, visual_class):
    ad = screen.allowed_depths
    for di in ad:
        if di.depth == depth:
            for vi in di.visuals:
                if vi.visual_class == visual_class:
                    return vi.visual_id
    return -1

visualid = find_visualid(32, X.TrueColor)
if visualid == -1:
    sys.stderr.write('%s: server does not support transparency\n' % sys.argv[1])
    sys.exit(1)

cm = root.create_colormap(visualid, X.AllocNone)

xpos = root.get_geometry().x
ypos = root.get_geometry().y
width = root.get_geometry().width
height = root.get_geometry().height

win = root.create_window(xpos,ypos,width,height,
    border_width = 0, depth = 32,
    window_class = X.InputOutput,
    visual = visualid,
    background_pixel = 0,
    border_pixel = 0,
    event_mask = (X.ExposureMask | X.StructureNotifyMask),
    colormap = cm,
    override_redirect = True
)

gc = win.create_gc(foreground = 0x80808080, background = 0x80808080)

# Remove input shape
ispm = win.create_pixmap(width, height, 1)
isgc = ispm.create_gc(foreground = 0, background = 0)
ispm.fill_rectangle(isgc, 0, 0, width, height)
win.shape_mask(shape.SO.Set, shape.SK.Input, 0, 0, ispm)
isgc.free()
ispm.free()

win.set_wm_name('bspwm Tree Visualizer')
win.set_wm_icon_name('bspwm_tree_visualizer')
win.set_wm_class('bspwmtreevisualizer', 'bspwmtreevisualizer')

# === Inbetween functions ===

node_diameter = node_radius * 2

def draw_circle(x_center,y_center):
    x = x_center - node_radius
    y = y_center - node_radius
    # Border
    gc.change(foreground = line_color)
    win.fill_arc(gc, x, y, node_diameter, node_diameter, 0, 360 * 64)
    # Inner Circle
    gc.change(foreground = node_color)
    win.fill_arc(gc, x + line_width, y + line_width, node_diameter - 2*line_width, node_diameter - 2*line_width, 0, 360 * 64)

def draw_line(x1,y1, x2,y2):
    gc.change(foreground = line_color)
    win.line(gc, x1,y1,x2,y2)


# === BSPWM Logic ===

proc = subprocess.run(["bspc", "query", "-T", "-d"], capture_output=True, text=True)
if proc.returncode != 0:
    sys.stderr.write("%s: Error when getting bspwm state\n" % sys.argv[1])
treejson = json.loads(proc.stdout)

window_gap = treejson['windowGap']
focused = treejson['focusedNodeId']

def draw_node(node, from_x = None, from_y = None):
    # Width and Height are not outputted correctly and need to be corrected with window_gap
    center_x = int(node['rectangle']['x'] + (node['rectangle']['width'] - window_gap) / 2)
    center_y = int(node['rectangle']['y'] + (node['rectangle']['height'] - window_gap) / 2)

    if from_x != None and from_y != None:
        draw_line(center_x, center_y, from_x, from_y)

    if node['firstChild'] != None:
        draw_node(node['firstChild'], center_x, center_y)
    if node['secondChild'] != None:
        draw_node(node['secondChild'], center_x, center_y)
    
    draw_circle(center_x, center_y)

# === Window Loop ===

win.map()

eve = None

try:
    # Wait for Expose Event
    while eve is None or eve.type != X.Expose:
        eve = dpy.next_event()

    # After window got exposed
    if treejson['root']:
        draw_node(treejson['root'])
    gc.free()
    dpy.flush() # Wait until request was sent
    sleep(visibility_duration)
except KeyboardInterrupt:
    pass
finally:
    # Cleanup
    win.destroy()
    dpy.close()
    sys.exit(0)

