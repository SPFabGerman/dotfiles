# === Options ===

# Setup Terminal
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",st-256color:Tc"
set -ga terminal-overrides ",alacritty:RGB"

# Set Title of the X Terminal Window, to match the title of the active tmux pane (which is set by the current shell)
# Passes the title "trough"
set -g set-titles on
set -g set-titles-string "[TMUX] #T"
# Automatically sets the windows NAME (not the panes title) to currently running command (unless specified otherwise)
set -g automatic-rename on
# set -g allow-rename on
#  More frequent status line updates
set -g status-interval 0

set -sg escape-time 0
set -g display-time 5000

# Starts Index numbers with 1, instead of 0 (Can be reached better from the keyboard)
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# Don't start a login shell
set -g default-command "${SHELL}"
set -g history-limit 10000

# === Keybindings ===
# Enable Mouse
set -g mouse on
# Use vi keybings
set -g mode-keys vi
# ... except when using a command prompt
set -g status-keys emacs

# Vim like splits
bind-key s split-window -v -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"
bind-key b break-pane
bind-key k confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind-key q confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Easier command prompt (use send-prefix if you need to send C-b to terminal)
bind-key C-b command-prompt
bind-key p command-prompt

# Better Pane Movement with awareness of vim splits
# (and also cycle-free)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-left  if-shell "$is_vim" 'send-keys M-left'  { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind-key -n M-down  if-shell "$is_vim" 'send-keys M-down'  { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n M-up    if-shell "$is_vim" 'send-keys M-up'    { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind-key -n M-right if-shell "$is_vim" 'send-keys M-right' { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Layouts
bind-key = select-layout -E
bind-key S select-layout main-vertical
bind-key M-S select-layout main-horizontal
bind-key G select-layout tiled
bind enter if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Copy Mode (Scrollback) Bindings:
# Don't immediatly exit copy mode
bind-key -T copy-mode-vi Enter send -X copy-selection
# Copy to System Clipboard
bind-key -T copy-mode-vi y send-keys -X copy-pipe 'xclip -in -selection clipboard'
# Don't immediatly unselect text after highlighting using mouse
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-no-clear 'xclip -in -selection primary'
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-no-clear 'xclip -in -selection primary'
bind-key -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-no-clear 'xclip -in -selection primary'

# === Styling ===
# Statusbar (Window Bar)
set -g status-style bg=terminal,fg=white
set -g status-right ""
set -g status-justify centre
set -g window-status-format         "#[fg=yellow]#[fg=black]#[bg=yellow]#I #[bg=brightblack]#[fg=white] #W#[fg=brightblack]#[bg=terminal]"
set -g window-status-current-format "#[fg=magenta]#[fg=black]#[bg=magenta]#I #[bg=brightblack]#[fg=white] #W#[fg=brightblack]#[bg=terminal]"
set -g window-status-separator "  "
# Hide Status Bar, when there is only one window
set-hook -g -a window-linked   'if -F "#{==:#{session_windows},1}" "set status off" "set status on"'
set-hook -g -a window-unlinked 'if -F "#{==:#{session_windows},1}" "set status off" "set status on"'

# Pane Splits
# set -g pane-border-status bottom
set -g pane-border-style bg=terminal,fg=colour0
set -g pane-active-border-style bg=black,fg=colour7
set -g pane-border-indicators both
set -g pane-border-lines heavy
# Change active window background color when multiple panes are visible
set-hook -g -a after-split-window   'if -F "#{==:#{window_panes},1}" "set -w window-active-style bg=terminal" "set -w window-active-style bg=black"'
set-hook -g -a pane-exited          'if -F "#{==:#{window_panes},1}" "set -w window-active-style bg=terminal" "set -w window-active-style bg=black"'

