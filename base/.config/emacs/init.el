;; This file is generated by Emacs.org. Make changes there.

(defun list-faces (pos)
  "Get the font faces at POS."
  (interactive "d")
  (message "All Faces: %s" (remq nil
                                 (list
                                  (get-char-property pos 'read-face-name)
                                  (get-char-property pos 'face)
                                  (plist-get (text-properties-at pos) 'face)))))

(defun curr-line-empty-p ()
  "Return non-nil, if the current line is empty."
  (pcase (thing-at-point 'line t)
    ("" 't)
    ("\n" 't)))

(defun curr-line-only-space-p ()
  "Return non-nil, if the current line is empty or contains only space characters."
  (string-match-p "\\`[[:space:]]*\\'" (thing-at-point 'line t)))

(defun add-to-color (col radd gadd badd)
  "Take color and add respective red, green and blue values."
  (pcase-let* ((`(,r ,g ,b) (color-name-to-rgb col)))
    (color-rgb-to-hex (+ r radd) (+ g gadd) (+ b badd) 2)))

(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq gc-cons-threshold 100000000) ;; 100mb
;; (setq lsp-idle-delay 0.5) ;; Default
(setq lsp-log-io nil) ;; Default

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
;; (tooltip-mode -1)
(setq use-system-tooltips nil)
(set-fringe-mode 10) ;; Left and Right Border
(when (member 'doom-oceanic-next (custom-available-themes))
  ;; (load-theme 'doom-gruvbox 't)
  (load-theme 'doom-oceanic-next 't))
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message "fabian") ;; This variable needs some special treatment to activate

(setq use-short-answers t)

(setq frame-title-format '(multiple-frames "%b"
                                           ("" "%b - Emacs")))
(set-frame-parameter (selected-frame) 'alpha-background 95)

(setq window-resize-pixelwise t)

(set-face-attribute 'default nil :font "FiraCode Nerd Font:style=Retina" :height 120)
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font:style=Retina")
(set-face-attribute 'variable-pitch nil :font "FreeSans" :height 120 :weight 'normal)


(set-face-attribute 'child-frame-border nil :background "#ffffff")

(show-paren-mode)

(global-hl-line-mode)
;; Set the line number face explicitly, to avoid it being reset to variable-pitch by org-mode
(set-face-attribute 'line-number nil :inherit 'fixed-pitch)
(set-face-attribute 'line-number-current-line nil :background 'unspecified :inherit '(hl-line line-number))

(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
(setq-default indicate-buffer-boundaries 't)

;; cleaner scratch buffer
(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message nil)

(dolist (mode '(term-mode-hook
                vterm-mode-hook
                eshell-mode-hook
                shell-mode-hook
                help-mode-hook
                helpful-mode-hook
                Info-mode-hook
                apropos-mode-hook
                xref-after-update-hook
                ivy-occur-mode-hook
                ivy-occur-grep-mode-hook
                imenu-list-major-mode-hook
                treemacs-mode-hook
                pdf-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(dolist (mode '(term-mode-hook
                vterm-mode-hook
                eshell-mode-hook
                shell-mode-hook))
  (add-hook mode (lambda () (setq-local global-hl-line-mode nil))))

(setq mouse-wheel-scroll-amount '(3))
(setq mouse-wheel-tilt-scroll 't)
(setq mouse-wheel-flip-direction 't)
(setq mouse-wheel-progressive-speed nil)
(setq scroll-step 5)
(setq hscroll-step 0.2)
(setq hscroll-margin 1)
(setf (alist-get 'truncation fringe-indicator-alist) '(nil right-arrow))

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose t)
(setq use-package-compute-statistics t)

(defun fab/update-selected-packages-with-use-package ()
  "Updates the `package-selected-packages' variable according to information collected by use-package.
This allows you to run `package-autoremove' to remove all packages which are not initialized by use-package.
So removing a use-package declaration, e.g. from your initialization file, marks a package for future removal.

    Also prints a message if removable packages are found.

    Requires that `use-package-compute-statistics' is set to t. Otherwise this function does nothing."
  ;; If initialization is not finished, run function again after initialization.
  (when use-package-compute-statistics
    (if (not after-init-time)
        (add-hook 'after-init-hook #'fab/update-selected-packages-with-use-package)
      (let ((new-packages (sort (hash-table-keys use-package-statistics) #'string<)))
        (unless (equal package-selected-packages new-packages) ;; Only update list if it has changed, to avoid unnecessary writes to custom file
          (package--save-selected-packages new-packages)))
      (when-let ((removable (package--removable-packages)))
        (message "The following packages can be removed: %s" removable)))
    ))

(fab/update-selected-packages-with-use-package)

(use-package auto-package-update
  :init
  (setq auto-package-update-last-update-day-filename "var/last-package-update-day")
  :config
  (setq auto-package-update-interval 14)
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-prompt-before-update t)
  ;; (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))

(global-auto-revert-mode)

(electric-pair-mode)

;; Silence compiler warnings as they can be pretty disruptive
(setq warning-suppress-log-types '((comp)))
(setq comp-async-report-warnings-errors nil)

(setq save-abbrevs nil)

(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)

;; Don't use Tabs
(setq-default indent-tabs-mode nil)

(setq tab-always-indent nil)

;; (use-package all-the-icons)
(use-package nerd-icons)

(use-package no-littering)

(require 'recentf)
(add-to-list 'recentf-exclude no-littering-var-directory)
(add-to-list 'recentf-exclude no-littering-etc-directory)

;; Change location of auto-save and backup files
(setq backup-directory-alist `(("." . ,(no-littering-expand-var-file-name "backups/"))))
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

;; Keep init.el clean of custom variables
(setq custom-file (no-littering-expand-etc-file-name "custom.el"))
(load custom-file)

(recentf-mode 1)
(setq recentf-max-saved-items 100)
(setq recentf-max-menu-items recentf-max-saved-items)
(add-to-list 'recentf-exclude ".*\\.png")

(use-package project
  :init
  ;; Ignore Helpful Mode buffers
  (setq project-ignore-buffer-conditions '((major-mode . helpful-mode)))
  (setq project-kill-buffer-conditions ;; Copied from original, with slight modification for helpful mode buffers
        '(buffer-file-name
          (and
           (major-mode . fundamental-mode)
           "\\`[^ ]")
          (and
           (derived-mode . special-mode)
           (not
            (major-mode . help-mode))
           (not
            (major-mode . helpful-mode))
           (not
            (derived-mode . gnus-mode)))
          (derived-mode . compilation-mode)
          (derived-mode . dired-mode)
          (derived-mode . diff-mode)
          (derived-mode . comint-mode)
          (derived-mode . eshell-mode)
          (derived-mode . change-log-mode)))
  (setq project-kill-buffers-display-buffer-list t)
  )

(defun fab/counsel-project-switch-to-buffer ()
  "Switch to another buffer belonging to the current project.
Two buffers belong to the same project if their
project instances, as reported by `project-current' in each
buffer, are identical.
Display a preview of the selected ivy completion candidate buffer
in the current window."
  (interactive)
  (let* ((pr (project-current t))
         (buffers (project-buffers pr))
         (predicate
          (lambda (buffer)
            ;; BUFFER is an entry (BUF-NAME . BUF-OBJ) of Vbuffer_alist.
            (and (memq (cdr buffer) buffers)
                 (not
                  (project--buffer-check
                   (cdr buffer) project-ignore-buffer-conditions))
                 (buffer-file-name (cdr buffer))))))
    (ivy-read "Switch to buffer: " #'internal-complete-buffer
              :keymap ivy-switch-buffer-map
              :preselect (buffer-name (other-buffer (current-buffer)))
              :update-fn #'counsel--switch-buffer-update-fn
              :action #'ivy--switch-buffer-action
              :unwind #'counsel--switch-buffer-unwind
              :predicate predicate
              :matcher #'ivy--switch-buffer-matcher
              :caller 'ivy-switch-buffer)))

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-:") 'eval-expression)

(setq evil-emacs-state-cursor '("seagreen" box))
(setq evil-normal-state-cursor '("lightskyblue" box))
(setq evil-visual-state-cursor '("lightskyblue" hollow))
(setq evil-insert-state-cursor '("lightskyblue" bar))
(setq evil-replace-state-cursor '("orange" hollow))
(setq evil-operator-state-cursor '("lightskyblue" hbar))
(setq evil-motion-state-cursor '("lightskyblue" hbar))

;; (setq evil-want-C-w-in-emacs-state 't)
(setq evil-want-Y-yank-to-eol 't)
(setq evil-want-C-u-scroll 't)
;; (setq evil-respect-visual-line-mode 't)
(setq evil-split-window-below 't)
(setq evil-vsplit-window-right 't)
(setq evil-undo-system 'undo-redo)
(setq evil-kill-on-visual-paste nil)
(setq evil-echo-state nil)
(setq evil-want-keybinding nil)
(setq evil-want-integration 't)

;; Start with forward searches by default (important for Swiper)
(setq isearch-forward 't)
(setq evil-symbol-word-search t)

(use-package evil)

;; I use my own jump list implementation (see below). This removes the default evil implementation.
(remove-hook 'evil-local-mode-hook #'evil--jumps-install-or-uninstall)

(evil-mode 1)
;; (add-to-list 'evil-insert-state-modes 'vterm-mode)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(evil-define-operator fab/evil-delete-char-noyank (beg end type register)
  "Delete next character. Don't yank to register."
  :motion evil-forward-char
  (interactive "<R><x>")
  (evil-delete beg end type ?_))
(evil-define-key 'normal 'global "x" 'fab/evil-delete-char-noyank)

(use-package evil-surround
  :after evil
  :config
  (general-def '(normal visual) evil-surround-mode-map
    "s" 'evil-surround-region
    "S" 'evil-Surround-region)
  ;; TODO: Text objects for other common surround stuff
  (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :config
  ;; (delete 'info evil-collection-mode-list)
  (setq evil-collection-want-unimpaired-p nil)
  (evil-collection-init)
  (evil-collection-require 'unimpaired) ;; I like to have the functionality of unimparied, but not the keybindings
  )

(defun avy-goto-org-table ()
  "Avy navigation of cells in org-mode tables.  'SPC' can be used to jump to blank cells. "
  (interactive)
  ;; set some variables to limit candidates to the current table
  (let ((table-begin (save-excursion (goto-char (org-table-begin)) (previous-line) (point)))
        (table-end (save-excursion (goto-char (org-table-end)) (next-line) (point))))
  ;; jump to the desired cell and re-align
  (avy--generic-jump "| " nil table-begin table-end)
  (org-cycle)))

(defun fab/flyspell-is-error-p ()
  "Check if point is on a word marked by flyspell as an error."
  (let ((ovs (overlays-at (point)))
        (r '()))
    (while (and (not r) (consp ovs))
      (if (flyspell-overlay-p (car ovs))
          (setq r t)
        (setq ovs (cdr ovs))))
    r))

(defun avy-goto-flyspell-error ()
  "Avy navigation to words marked by flyspell."
  (interactive)
  (avy-with avy-goto-word-0
    (avy-jump avy-goto-word-0-regexp :pred #'fab/flyspell-is-error-p)))

(defun avy-correct-flyspell-error ()
  "Use avy to select a wrong word and immediatly correct it."
  (interactive)
  (avy-with avy-goto-word-0
    (avy-jump avy-goto-word-0-regexp :pred #'fab/flyspell-is-error-p :action #'avy-action-ispell)))

(use-package avy
  :after evil
  :config
  (setq avy-background t)
  (setq avy-flyspell-correct-function #'ispell-word)
  ;; Use FreeMono as Font, to not mess with normal FreeSans font for OrgMode
  ;; TODO: Make Font Buffer local
  (set-face-attribute 'avy-lead-face nil :foreground (doom-color 'red) :background 'unspecified :font "FreeMono" :inherit 'fixed-pitch)
  (set-face-attribute 'avy-lead-face-0 nil :foreground (doom-color 'yellow) :background 'unspecified)
  (set-face-attribute 'avy-lead-face-1 nil :foreground (doom-color 'green) :background 'unspecified)
  (set-face-attribute 'avy-lead-face-2 nil :foreground (doom-color 'teal) :background 'unspecified)
  (general-def '(normal visual motion) :prefix ";"
    "" nil
    ";" 'avy-resume
    "n" 'avy-next
    "N" 'avy-prev
    "f" 'evil-avy-goto-char
    "F" 'evil-avy-goto-char-timer
    "l" 'evil-avy-goto-line
    "w" 'evil-avy-goto-word-1
    "W" 'evil-avy-goto-word-0
    "o" 'evil-avy-goto-symbol-1
    "s" 'avy-goto-flyspell-error
    "S" 'avy-correct-flyspell-error)
  (general-def 'normal org-evil-table-mode-map :prefix ";"
    "t" 'avy-goto-org-table))

(use-package which-key
  :init
  (setq which-key-idle-delay 0.1) ;; Can cause errors when 0
  (setq which-key-prefix-prefix "+")
  ;; (setq which-key-allow-evil-operators 't)
  ;; (setq which-key-show-operator-state-maps 't)
  (which-key-mode))
;; (which-key-setup-side-window-right-bottom)
(global-set-key (kbd "<C-tab>") 'which-key-show-top-level)

(use-package general
  :config
  (general-evil-setup 't)
  (general-create-definer fab/leader-def
    :states '(normal visual)
    :prefix "SPC"))

(general-def 'normal 'override
  "<M-down>"  'evil-window-down
  "<M-left>"  'evil-window-left
  "<M-right>" 'evil-window-right
  "<M-up>"    'evil-window-up
  )

(general-def 'normal
  ;; TODO: make only active when not in Read-Only buffer
  ;; [remap evil-ret] '(lambda () (interactive) (evil-open-below 0) (evil-normal-state)) 
  ;; "S-<return>" '(lambda () (interactive) (evil-open-above 0) (evil-normal-state))
  "U"         'evil-redo)

(general-def '(normal visual)
  "," 'evil-repeat-find-char)

(general-def 'insert
  ;; Terminal style paste
  "C-S-V" '(lambda () (interactive) (evil-paste-before 1) (right-char)))

;; More [/] (forward/backward) bindings
(general-def 'normal
  ;; Quick buffer jumping
  "[ b" 'evil-prev-buffer
  "] b" 'evil-next-buffer)

(general-imap "j"
              (general-key-dispatch 'self-insert-command
                :timeout 0.1
                "k" 'evil-normal-state))

(general-def '(normal visual) 'override
  "C-SPC" 'execute-extended-command
  "C-a" 'universal-argument)

(general-def universal-argument-map
  "C-a" 'universal-argument-more)

;; TODO: Use save-excursion instead of let to save point.
(defun fab/hs-toggle-block-on-line ()
  "Toggle the last block on the current line, if it exists.
This is normally the only block we care about.
Return t on success, otherwise nil.
Note: Last Block detection currently only checks the last character of the line."
  (interactive)
  (let ((pos (point))
        (suc))
    (goto-char (1- (line-end-position)))
    (cond
     ((hs-looking-at-block-start-p)
      (hs-toggle-hiding)
      (setq suc t))
     ((when-let* ((c (hs-inside-comment-p)) ;; Hide comment only, when point is at beginning line
                  (c-beg (car c))
                  ((>= c-beg (line-beginning-position))))
        (hs-toggle-hiding)
        (setq suc t))))
    (goto-char pos)
    suc
    ))

(defun fab/normal-mode-tab ()
  "Tab action for normal mode."
  (interactive)
  (cond
   ((and hs-minor-mode (fab/hs-toggle-block-on-line)))
   (t (message "No tab action possible."))))

(general-def 'normal "<tab>" 'fab/normal-mode-tab)

(fab/leader-def
  "SPC" '(execute-extended-command :wk "Run CMD"))

(fab/leader-def :infix "f"
  ""  '(:ignore t :wk "Files")
  "f" '(find-file :wk "Open")
  "r" '(counsel-recentf :wk "Recent")
  "m" '(bookmark-jump :wk "Bookmarks")
  )

(fab/leader-def "p" '(:keymap project-prefix-map :wk "Projects"))
(general-def project-prefix-map
  "b" '(fab/counsel-project-switch-to-buffer :wk "project-switch-to-buffer"))

(use-package evil-nerd-commenter
  :general ('(normal visual) "#" 'evilnc-comment-or-uncomment-lines))

(defcustom evil-contextual-next-functions-list
      '((evil-search evil-search-next evil-search-previous
                     evil-search-forward evil-search-backward
                     evil-search-word-forward evil-search-word-backward)
        (flycheck flycheck-next-error flycheck-previous-error
                  flycheck-first-error)
        (flyspell evil-next-flyspell-error evil-prev-flyspell-error))
      "List of specifications for contextual next/prev commands.
A specification is a list (ID NEXT PREV [OTHER]).")

(defvar-local evil-contextual-next-current-spec 'evil-search "Currently active specification for contextual next/prev commands.")

(defun evil-contextual-next--find-spec (fn)
  "Return the specification in `evil-contextual-next-functions-list', that contains `fn'."
  (seq-some (lambda (l) (and (seq-contains-p (cdr l) fn #'eq) (car l)))
            evil-contextual-next-functions-list))

(defun evil-contextual-next--set-spec (fn)
  "Updates `evil-contextual-next-current-spec' to spec that contains `fn', if necessary."
  (when-let* ((s (evil-contextual-next--find-spec fn)))
    (setq evil-contextual-next-current-spec s)))



(defun evil-contextual-next--post-command-hook ()
  "Updates `evil-contextual-next-current-spec', if necessary."
  (evil-contextual-next--set-spec this-command))
(defun evil-contextual-next--command-execute-advice (fn &rest r)
  "Updates `evil-contextual-next-current-spec', if necessary."
  (evil-contextual-next--set-spec fn))

(add-hook 'post-command-hook #'evil-contextual-next--post-command-hook)
(advice-add #'command-execute :after #'evil-contextual-next--command-execute-advice)

(defun evil-contextual-next ()
  "Call next-function, as specified by `evil-contextual-next-current-spec' and `evil-contextual-next-functions-list'."
  (interactive)
  (funcall (elt (alist-get evil-contextual-next-current-spec evil-contextual-next-functions-list) 0)))

(defun evil-contextual-prev ()
  "Call prev-function, as specified by `evil-contextual-next-current-spec' and `evil-contextual-next-functions-list'."
  (interactive)
  (funcall (elt (alist-get evil-contextual-next-current-spec evil-contextual-next-functions-list) 1)))

(evil-define-key 'motion 'global "n" #'evil-contextual-next)
(evil-define-key 'motion 'global "N" #'evil-contextual-prev)

(defcustom point-undo-line-delta 1 "Amount of Lines, before the current position is put into undo-list.")

(defun point-undo--pre-command-hook ()
  (let ((prev-pos (or (window-parameter nil 'point-undo--prev-pos)
                      (set-window-parameter nil 'point-undo--prev-pos (make-marker)))))
    (set-marker prev-pos (point) (current-buffer))))

(defun point-undo--post-command-hook ()
  (let ((prev-pos (window-parameter nil 'point-undo--prev-pos)))
    (unless (memq this-command '(point-undo point-redo))
      (when (and prev-pos (marker-buffer prev-pos) (marker-position prev-pos)
                 (or (not (equal (marker-buffer prev-pos) (current-buffer)))
                     (not (<= (- (line-number-at-pos prev-pos t) point-undo-line-delta)
                              (line-number-at-pos (point) t)
                              (+ (line-number-at-pos prev-pos t) point-undo-line-delta)))))
        (push (copy-marker prev-pos) (window-parameter nil 'point-undo-list)))
      (set-window-parameter nil 'point-redo-list nil))
    (when prev-pos
      (set-marker prev-pos nil))))

(defun point-undo--goto-marker (marker)
  (when (and marker (marker-buffer marker) (marker-position marker))
    (switch-to-buffer (marker-buffer marker))
    (goto-char marker)
    (set-marker marker nil)))

(defun point-undo ()
  "Undo position."
  (interactive)
  (when (window-parameter nil 'point-undo-list)
    (push (point-marker) (window-parameter nil 'point-redo-list))
    (point-undo--goto-marker (pop (window-parameter nil 'point-undo-list)))))

(defun point-redo ()
  "Redo position."
  (interactive)
  (when (window-parameter nil 'point-redo-list)
    (push (point-marker) (window-parameter nil 'point-undo-list))
    (point-undo--goto-marker (pop (window-parameter nil 'point-redo-list)))))



(add-hook 'pre-command-hook #'point-undo--pre-command-hook)
(add-hook 'post-command-hook #'point-undo--post-command-hook)
(evil-define-key 'normal 'global (kbd "C-o") #'point-undo)
(evil-define-key 'normal 'global (kbd "C-i") #'point-redo)

(use-package ivy
  :diminish
  :demand t
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-g" . ivy-beginning-of-buffer)
         ("C-o" . ivy-occur)
         ("C-a" . ivy-dispatching-done)
         ("C-S-a" . ivy-dispatching-call)
         ("C-r" . ivy-restrict-to-matches)
         ("C-p" . yank)
         :map ivy-switch-buffer-map
         ("C-d" . ivy-switch-buffer-kill))
  :config
  (setq ivy-use-selectable-prompt 't)
  (setq ivy-wrap 't)
  ;; Ignore the the order of words
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  ;; Don't show . and .. directories
  (setq ivy-extra-directories '())
  ;; Use Monospace fonts in switch-buffer
  (set-face-attribute 'ivy-org nil  :inherit '(fixed-pitch org-level-4))
  (fab/leader-def ivy-mode-map
    "I" '(ivy-resume :wk "Ivy Resume"))
  (ivy-mode))

(use-package nerd-icons-ivy-rich
  :after (ivy counsel nerd-icons)
  :config
  (nerd-icons-ivy-rich-mode))

(use-package ivy-rich
  :after (ivy counsel nerd-icons-ivy-rich)
  :config
  (setq ivy-rich-path-style 'abbrev)
  (ivy-rich-mode)

  ;; Fix "Not a Directory Error" that appears on Emacs 30 and above, with some buffers.
  ;; Why this bug only appears on newer Emacs versions is not clear to me.
  (advice-add #'helpful--buffer :filter-return
              (lambda (buf)
                (with-current-buffer buf
                  (setq-local list-buffers-directory nil))
                buf))

  (advice-add #'info-setup :after
              (lambda (_ buf)
                (with-current-buffer buf
                  (setq-local list-buffers-directory nil))
                buf))
  )

(use-package counsel
  :after ivy
  :config
  (setq ivy-initial-inputs-alist nil) ;; Removes initial inputs
  (fab/leader-def ivy-mode-map
    "B" '(counsel-switch-buffer :wk "All Buffers")
    "P" '(counsel-yank-pop :wk "Paste Kill Ring"))
  (counsel-mode))

(defun fab/counsel-switch-file-buffer ()
  "Switch to a buffer visiting a file, using counsel."
  (interactive)
  (let ((ivy-update-fns-alist
         '((ivy-switch-buffer . counsel--switch-buffer-update-fn)))
        (ivy-unwind-fns-alist
         '((ivy-switch-buffer . counsel--switch-buffer-unwind))))
    (ivy-read "Switch to buffer: " #'internal-complete-buffer
              :keymap ivy-switch-buffer-map
              :preselect (buffer-name (other-buffer (current-buffer)))
              :action #'ivy--switch-buffer-action
              :predicate (lambda (bufcons) (buffer-file-name (cdr bufcons)))
              :matcher #'ivy--switch-buffer-matcher
              :caller 'ivy-switch-buffer)))

(fab/leader-def ivy-mode-map
  "b" '(fab/counsel-switch-file-buffer :wk "Buffers"))

(use-package prescient
  :init
  (setq prescient-sort-length-enable nil)
  (setq prescient-sort-full-matches-first 't)
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (prescient counsel)
  :init
  ;; Use normal ivy filtering
  (setq ivy-prescient-enable-filtering nil)
  ;; (setq ivy-prescient-retain-classic-highlighting t)
  :config
  (ivy-prescient-mode)
  ;; Disable sorting for certain commands
  (nconc ivy-prescient-sort-commands '(counsel-recentf counsel-org-goto project-prompt-project-dir project-prompt-project-name project-switch-project)))

;; Remove useless default actions ("copy" and "insert")
;; (ivy-set-actions 't nil)

(ivy-add-actions
 'counsel-switch-buffer
 '(("s" (lambda (BNAME) (interactive) (evil-window-split) (switch-to-buffer BNAME)) "Split")
   ("v" (lambda (BNAME) (interactive) (evil-window-vsplit) (switch-to-buffer BNAME)) "VSplit")))

(ivy-add-actions
 'counsel-find-file
 '(("s" (lambda (FNAME) (interactive) (evil-window-split nil FNAME)) "Split")
   ("v" (lambda (FNAME) (interactive) (evil-window-vsplit nil FNAME)) "VSplit")))

;; TODO: Open in same window
(use-package helpful
  :init
  (setq helpful-switch-buffer-function #'pop-to-buffer)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  (counsel-describe-symbol-function #'helpful-symbol)
  :bind
  ;; ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command) ;; TODO: Needed for what?
  ;; ([remap describe-variable] . counsel-describe-variable)
  ;; ([remap describe-symbol] . counsel-describe-symbol)
  ([remap describe-key] . helpful-key)
  ("C-h p" . helpful-at-point))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package doom-themes
  :config
  ;; Only load theme, if it is not already loaded.
  (unless (member 'doom-oceanic-next custom-enabled-themes)
    ;; (load-theme 'doom-gruvbox 't)
    (load-theme 'doom-oceanic-next 't)))

(column-number-mode)

(use-package doom-modeline
  :config
  (doom-modeline-mode)
  :custom
  (doom-modeline-height 25)
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-highlight-modified-buffer-name nil)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-percent-position nil)
  (doom-modeline-enable-word-count t)
  (doom-modeline-indent-info 't)
  (doom-modeline-lsp nil)
  (doom-modeline-env-version nil)
  )

(use-package ligature
  :config
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/=" "/>" "//" "__" "~~" "://"))
  (global-ligature-mode)
  )

(defun fab/center-text-visual (&optional width)
  (setq visual-fill-column-width (or width 120))
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode))

(use-package visual-fill-column
  :hook ((org-mode     . fab/center-text-visual)
         (helpful-mode . (lambda () (fab/center-text-visual 90)))
         (Info-mode    . (lambda () (fab/center-text-visual 100)))))

(defun fab/company-on-return ()
  "Complete Selection when a value is selected, otherwise insert a newline"
  (interactive)
  (if company-selection
      (company-complete-selection)
    (newline)))

(defun fab/company-on-tab ()
  "Insert current selection or default to the first one."
  (interactive)
  (unless company-selection
    (company-select-first))
  (company-complete-selection))

(use-package company
  :hook ((lsp-mode prog-mode org-mode) . company-mode)
  :config
  (general-def 'insert company-mode-map
    "C-SPC"     'company-complete-common)
  (general-def company-active-map
    "<tab>"    'fab/company-on-tab
    "<return>" 'fab/company-on-return
    "<escape>" 'company-abort
    "<down>"   'company-select-next
    "<up>"     'company-select-previous)
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.2) ;; Maybe set to 0 or 0.01?
  (company-tooltip-align-annotations 't)
  (company-selection-wrap-around 't)
  (company-require-match nil)
  )

(use-package company-box
  :after company
  :hook (company-mode . company-box-mode)
  :config
  ;; Some better borders for the documentation window
  (setq company-box-doc-frame-parameters '((left-fringe . 10) (right-fringe . 10))))

(use-package company-prescient
  :after company
  :config
  (company-prescient-mode 1))

(use-package posframe
  :config

  ;; Shorten delay to run hidehandler
  (defun posframe-hidehandler-daemon ()
  "Run posframe hidehandler daemon."
  (when (timerp posframe-hidehandler-timer)
    (cancel-timer posframe-hidehandler-timer))
  (setq posframe-hidehandler-timer
        (run-with-idle-timer 0.1 t #'posframe-hidehandler-daemon-function)))
  (posframe-hidehandler-daemon)
)

(defun fab/reshrink-window (&optional window)
  (interactive)
  (balance-windows (window-parent window))
  (shrink-window-if-larger-than-buffer window))

(advice-add 'lsp-find-locations :after
            (lambda (&rest r)
              (when (eq (buffer-local-value 'major-mode (window-buffer)) 'xref--xref-buffer-mode)
                (fab/reshrink-window))))

(advice-add 'help-window-setup :after
            (lambda (window &rest r)
              (when (eq (buffer-local-value 'major-mode (window-buffer window)) 'help-mode)
                (fab/reshrink-window window))))

(advice-add 'pop-to-buffer :after
            (lambda (&rest r)
              (when (string-prefix-p "*ivy-occur" (buffer-name))
                (when (eq major-mode 'ivy-occur-grep-mode)
                  (goto-line 1)
                  (ivy-occur-delete-candidate)
                  (ivy-occur-delete-candidate)
                  (ivy-occur-delete-candidate))
                (fab/reshrink-window)
                (goto-line 1))))

(defun fab/shrink-window-to-region ()
  "Resize the current window, such that only the selected region is visible."
  (interactive)
  ;; Use window-resize to make pixelwise calculations. Use window-text-height to not include the modeline.
  (window-resize nil (- (* (count-lines (region-beginning) (region-end)) (line-pixel-height)) (window-text-height nil t)) nil t t)
  (goto-char (region-beginning))
  (recenter 0))

(use-package imenu-list
  :config
  ;; (fab/leader-def "O" 'imenu-list-smart-toggle)
  (setq imenu-list-focus-after-activation t)
  (setq imenu-list-position 'left)
  (setq imenu-list-size 30)
  (setq imenu-list-mode-line-format mode-line-format))

(use-package dashboard
  :config
  (setq dashboard-items '((projects . 5)
                          (recents . 5)
                          (bookmarks . 5)))
  (setq dashboard-projects-backend 'project-el)

  (setq dashboard-startup-banner 'logo)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (dashboard-modify-heading-icons '((projects . "nf-oct-repo")
                                    (recents . "nf-oct-history")
                                    (bookmarks . "nf-oct-bookmark")))

  (setq dashboard-center-content t)

  (setq dashboard-init-info
        (lambda ()
          (let ((package-count (length package-activated-list)) (time (emacs-init-time "%.2f seconds")))
            (format "%d packages loaded in %s" package-count time))))
  
  (dashboard-setup-startup-hook))

;; Seems to be required by some other packages
(use-package monitor)

(defun fab/org-mode-setup ()
  (setq tab-width 2)
  (variable-pitch-mode 1)
  (display-line-numbers-mode 0)
  (visual-line-mode 1)
  (electric-pair-local-mode -1)
  (org-fold-hide-drawer-all) ;; TODO: Why do I have to do this manually?
  (when (package-installed-p 'cdlatex)
    (require 'cdlatex)
    (org-cdlatex-mode)))

(defun fab/org-font-setup ()
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 2.0)
                  (org-level-2 . 1.5)
                  (org-level-3 . 1.25)
                  (org-level-4 . 1.15)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font "FreeSans" :weight 'regular :height (cdr face)))

  (require 'org-indent)
  (set-face-attribute 'org-document-title nil :font "FreeSans" :weight 'bold :height 3.0)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-code nil     :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-latex-and-related nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-hide   nil   :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-indent nil   :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-meta-line nil :foreground 'unspecified :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-drawer   nil   :inherit 'fixed-pitch)
  (set-face-attribute 'org-document-info-keyword nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-keyword-face fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
  )

(use-package org
  :pin org ;; Use Org-Mode Archive
  :hook (org-mode . fab/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (setq org-hide-emphasis-markers 't)
  (setq org-pretty-entities 't)
  (setq org-startup-with-latex-preview 't)
  (setq org-cycle-global-at-bob 't)
  ;; (setq org-startup-folded 't)
  (setq org-catch-invisible-edits 'smart)
  (setq org-M-RET-may-split-line nil)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-highlight-latex-and-related '(latex))
  (setq org-list-indent-offset 1)
  (setq org-hide-leading-stars 't)
  (setq org-hidden-keywords '(title subtitle author email date))
  (setq org-indent-indentation-per-level 2)
  (setq org-startup-indented 't)
  (setq org-startup-truncated nil)
  (setq org-startup-with-inline-images 't)
  ;; (setq org-edit-src-content-indentation 2)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (setq org-preview-latex-image-directory (no-littering-expand-var-file-name "ltximg/"))
  (setq org-image-actual-width 600)

  ;; Fontify seperator lines
  (add-hook 'org-font-lock-set-keywords-hook
            (lambda ()
              (push '("^ *\\(-----+\\)$" 1 'org-meta-line) org-font-lock-extra-keywords)))
    
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  (fab/org-font-setup))

;; Fix wierd bug where latex fragment previews are removed, when inserting a new item in a list
(advice-add 'org-list-insert-item :after (lambda (&rest r) (when org-fragtog-mode (org--latex-preview-region (point-min) (point-max)))))

(defun org-table-insert-column-after ()
  "Insert a new column into the table, after the current coloumn"
  (interactive)
  (unless (org-at-table-p) (user-error "Not at a table"))
  (when (eobp) (save-excursion (insert "\n")))
  (unless (string-match-p "|[ \t]*$" (org-current-line-string))
    (org-table-align))
  (org-table-find-dataline)
  (let ((col (1+ (max 1 (org-table-current-column))))
        (beg (org-table-begin))
        (end (copy-marker (org-table-end)))
        (shrunk-columns (org-table--list-shrunk-columns)))
    (org-table-expand beg end)
    (save-excursion
      (goto-char beg)
      (while (< (point) end)
        (unless (org-at-table-hline-p)
          (org-table-goto-column col t)
          (insert "|"))
        (forward-line)))
    (org-table-goto-column col)
    (org-table-align)
    ;; Shift appropriately stored shrunk column numbers, then hide the
    ;; columns again.
    (org-table--shrink-columns (mapcar (lambda (c) (if (< c col) c (1+ c)))
                                       shrunk-columns)
                               beg end)
    (set-marker end nil)
    ;; Fix TBLFM formulas, if desirable.
    (when (or (not org-table-fix-formulas-confirm)
              (funcall org-table-fix-formulas-confirm "Fix formulas? "))
      (org-table-fix-formulas "$" nil (1- col) 1))))

(defun fab/counsel-org-goto-action (x)
  (when x
    (counsel-org-goto-action x)
    (recenter 1)))

(defun fab/counsel-org-goto ()
  "Jump to an outline heading with completion."
  (interactive)
  (let ((settings (cdr (assq major-mode counsel-outline-settings))))
    (ivy-read "Outline: " (counsel-outline-candidates settings)
              :action #'fab/counsel-org-goto-action
              :update-fn 'auto
              :history (or (plist-get settings :history)
                           'counsel-outline-history)
              :preselect (max (1- counsel-outline--preselect) 0)
              :caller (or (plist-get settings :caller)
                          'counsel-outline))))

(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-headline-bullets-list '("◉" "◎" "●" "⊙" "○" "●" "◈" "◇"))
  ;; (org-superstar-remove-leading-stars 't)
  (org-superstar-item-bullet-alist '((?* . ?◆) (?+ . ?○) (?- . ?●)))
  :config
  (set-face-attribute 'org-superstar-item nil :height 0.5) 
  )

(use-package org-appear
  :after org
  :init
  (setq org-appear-autolinks 't
        org-appear-autoentities 't
        org-appear-autosubmarkers 't
        org-appear-autokeywords 't
        org-appear-inside-latex 't)
  :hook (org-mode . org-appear-mode))

(use-package org-fragtog
  :after org
  :hook (org-mode . org-fragtog-mode))

(use-package org-pretty-table
  :load-path "~/.config/emacs/org-pretty-table"
  :after org
  :hook (org-mode . org-pretty-table-mode))

(defvar-local fab/org-src-blocks-display-line-numbers--overlays '()
  "List of overlays for line numbers.")

(defun fab/org-src-blocks-display-line-numbers-remove-all ()
  "Remove all line number overlays in the src blocks."
  (interactive)
  (mapc 'delete-overlay fab/org-src-blocks-display-line-numbers--overlays)
  (setq fab/org-src-blocks-display-line-numbers--overlays '()))

(defun fab/org-src-blocks-display-line-numbers-update ()
  "Add or update the line number overlays in the src blocks.
Only adds line numbers to visible src blocks."
  (interactive)
  (fab/org-src-blocks-display-line-numbers-remove-all)
  (save-excursion
    (let ((ws (- (window-start) 500)) ;; Add some puffer to avoid problems on scrolling
          (we (+ (window-end) 500))) ;; Note that these denote characters and not lines
      (org-babel-map-src-blocks nil
        (goto-char beg-body)
        (unless (or (> beg-body we) (< end-body ws) (org-truly-invisible-p))
          (dotimes (i (count-lines beg-body end-body))
            (beginning-of-line)
            (when (<= ws (point) we)
              (let ((ol (make-overlay (point) (line-end-position))))
                (overlay-put ol 'before-string (propertize (format "%3s " (number-to-string (1+ i))) 'face 'line-number))
                ;; (overlay-put ol 'wrap-prefix "    ")
                (push ol fab/org-src-blocks-display-line-numbers--overlays)))
            (next-logical-line)))))))

(defun fab/org-src-blocks-display-line-numbers-setup ()
  "Setup line numbers for src blocks."
  (interactive)
  (add-hook 'post-command-hook #'fab/org-src-blocks-display-line-numbers-update nil t)
  (fab/org-src-blocks-display-line-numbers-update))

(add-hook 'org-mode-hook #'fab/org-src-blocks-display-line-numbers-setup)
(setq org-edit-src-content-indentation 0)

;; TODO: Change to visual-line-mode-map
(general-def '(normal visual) org-mode-map
  "<down>" 'evil-next-visual-line
  "<up>"   'evil-previous-visual-line)

(general-def 'normal org-mode-map
  "C-e" 'org-edit-special)
;; Use minor-mode-define-key to load keys immediatly
(evil-define-minor-mode-key '(normal insert) 'org-src-mode (kbd "C-e") 'org-edit-src-exit)

(fab/leader-def org-mode-map :infix "o"
  ""    '(:ignore t :wk "Org-Mode")

  "g"   '(fab/counsel-org-goto :wk "Goto")

  ;; TODO: Make only available when in a table
  "t"   '(:ignore t :wk "Tables")
  "t t" '(org-table-create-or-convert-from-region :wk "Create")
  "t d" '(org-table-delete-column :wk "Delete Column")
  "t i" '(org-table-insert-column :wk "Insert Column Before")
  "t a" '(org-table-insert-column-after :wk "Insert Column After")
  "t s" '(org-table-sort-lines :wk "Sort by Column")
  ;; "t d" '(org-table-cut-region :wk "Delete")
  ;; "t y" '(org-table-copy-region :wk "Yank")
  ;; "t p" '(org-table-paste-rectangle :wk "Paste")
  "t I" '(org-table-import :wk "Import")
  "t E" '(org-table-export :wk "Export")

  "i" '(org-toggle-inline-images :wk "Images")

  "l" '((lambda () (interactive) (org-fragtog-mode -1) (org-fragtog-mode 1) (org-latex-preview)) :wk "Latex Fragments")

  "b" '(org-insert-structure-template :wk "Block")

  ;; TODO: Find better solution for this
  "I"   '(:ignore t :wk "Insert Preset")
  "I g"
  '((lambda ()
      (interactive)
      (unless (curr-line-empty-p) (end-of-line) (insert "\n"))
      (insert "#+LANGUAGE: de\n")
      (insert "#+LATEX_HEADER: \\usepackage{icomma}\n")
      (insert "#+LATEX_HEADER: \\usepackage{csquotes}\n#+LATEX_HEADER: \\MakeOuterQuote{\"}"))
    :wk "German Setup")
  "I h" '((lambda () (interactive) (unless (curr-line-empty-p) (end-of-line) (insert "\n"))
              (insert "#+LATEX_HEADER: \\usepackage{hyphenat}\n#+LATEX_HEADER: \\hyphenation{}"))
            :wk "Hypenation")
  )

(general-def '(normal insert) org-mode-map
  "C-<return>" '(lambda () (interactive) (org-insert-heading-respect-content) (org-fold-show-entry) (evil-insert-state)))

;; Keybinds to use for latex fragments. TODO: Maybe use Smartparens or evil-cleverparens package for that?
(general-def '(insert) org-mode-map
  "$" '(lambda () (interactive) ;; Use other delimiters, since they work better with highlighting
         (if (org-inside-LaTeX-fragment-p)
             (goto-char (or (search-forward "\\)" (line-end-position) t) (line-end-position))) ;; Another dollar "ends" math mode -> exit latex fragment
           (insert "\\(\\)") (left-char 2)))
  
  "C-{" '(lambda () (interactive) (insert "\\{\\}") (left-char 2)))

(defun org-folded-p ()
  "Returns non-nil if point is on a folded headline or plain list item."
  (and (or (org-at-heading-p) (org-at-item-p))
       (invisible-p (point-at-eol))))

(defun org-before-item-bullet-p ()
  "Is point at or before the bullet of a plain list item?
Also works for numbered lists."
  (and (org-at-item-p)
       (< (point) (match-end 0))))

(defun org-item-empty-p ()
  "Is current line empty or only contains an empty item?"
  (or (curr-line-only-space-p)
      (and (org-at-item-p) (string-match-p "\\`[[:space:]]*[-+*][[:space:]]*\\'" (thing-at-point 'line t)))))

(defun fab/org-evil-list-insert-item (insert)
  (interactive "P")
  ;; TODO: Seperate insert and (org-item-empty-p). If we supply `insert` we don't want to delete the entire line.
  (if (or insert (org-item-empty-p)) ;; If we are at an empty line or item, just insert a normal newline
      (progn
        (delete-region (line-beginning-position) (line-end-position)) ;; Delete eventual whitespace
        (org-return))
    (when (org-before-item-bullet-p)
      (org-evil-list-beginning-of-item))
    (let ((text (delete-and-extract-region (point) (line-end-position))))
      (end-of-line)
      (org-insert-item (org-at-item-checkbox-p))
      (insert text)
      (org-evil-list-beginning-of-item))))


(defun fab/org-evil-list-open-item-above (insert)
  (interactive "P")
  (if (or insert (org-item-empty-p))
      (progn
        (delete-region (line-beginning-position) (line-end-position))
        (evil-open-above 1))
    (org-beginning-of-item) ;; Move to beginning of item, to ensure we always open above
    (org-insert-item (org-at-item-checkbox-p))
    (evil-insert-state)))

(defun fab/org-evil-list-open-item-below (insert)
  (interactive "P")
  (if (or insert (org-item-empty-p))
      (progn
        (delete-region (line-beginning-position) (line-end-position))
        (evil-open-below 1))
    (end-of-line) ;; Move to end of line, to ensure we always open below
    (org-insert-item (org-at-item-checkbox-p))
    (evil-insert-state)))

(defun fab/org-evil-heading-open-sibling-below (insert)
  (interactive "P")
  (if (or insert (org-folded-p))
      (progn
        (org-evil-heading-open-sibling-below)
        (org-fold-show-entry))
    (evil-open-below 1)))

(defun fab/org-evil-heading-open-sibling-above (insert)
  (interactive "P")
  (if (or insert (org-folded-p))
      (progn
        (org-evil-heading-open-sibling-above)
        (org-fold-show-entry))
    (evil-open-above 1)))

(evil-define-motion fab/org-evil-heading-beginning-of-line ()
  "Move to the beginning of the current heading."
  :type exclusive
  (org-back-to-heading)
  (re-search-forward "\*+ "))

(use-package org-evil
  :after org
  :load-path "~/.config/emacs/org-evil"
  :config
  (org-evil--define-key 'normal 'org-evil-list-mode
                        "O" 'fab/org-evil-list-open-item-above
                        "o" 'fab/org-evil-list-open-item-below)
  (org-evil--define-key 'insert 'org-evil-list-mode
                        (kbd "RET") 'fab/org-evil-list-insert-item)
  (org-evil--define-key 'normal 'org-evil-heading-mode
                        "O" 'fab/org-evil-heading-open-sibling-above
                        "o" 'fab/org-evil-heading-open-sibling-below
                        "^" 'fab/org-evil-heading-beginning-of-line))

(defun fab/org-prettify-symbols-setup ()
  ;; TODO: Put in mode specific list
  (setq prettify-symbols-unprettify-at-point 't)
  (push '("[ ]" . "󰄱	") prettify-symbols-alist)
  (push '("[-]" . "󰡖	") prettify-symbols-alist)
  (push '("[X]" . "󰱒	") prettify-symbols-alist)
  (prettify-symbols-mode))

(add-hook 'org-mode-hook 'fab/org-prettify-symbols-setup)

(define-abbrev-table 'fab/org-entity-abbrev-table
  '(("->" "\\rightarrow{}")
    ("=>" "\\Rightarrow{}")
    ("..." "\\dots")
    ("<=" "\\le{}")
    (">=" "\\ge{}")
    ("<<" "\\ll{}")
    (">>" "\\gg{}")
    ("!=" "\\ne")
    ("==" "\\equiv")
    ("~~" "\\approx"))
  :regexp (rx (or bol (not (any "=" "-" ">" "<" "." "!" "~"))) ;; This is needed since the regex is matched backwards and we need to have a well defined starting point for our word.
              (group (zero-or-more (any "=" "-" ">" "<" "." "!" "~")))))

(define-abbrev-table 'fab/org-latex-math-commands-abbrev-table
  '(("\\Nat" "\\mathbb{N}")
    ("\\Int" "\\mathbb{Z}")
    ("\\BigO" "\\mathcal{O}")
    ("\\inf" "\\infty")
    ("\\sun" "\\odot")
    ("\\const" "\\text{const.}"))
  :regexp (rx (group (not wordchar) (zero-or-more wordchar)))
  :enable-function #'org-inside-LaTeX-fragment-p
  )

(defun fab/org-abbrev-mode-setup ()
  ;; Add all abreviation tables to the org mode table
  ;; This has to be done after org has loaded, since org.el overwrites this property.
  (abbrev-table-put org-mode-abbrev-table :parents (list text-mode-abbrev-table fab/org-entity-abbrev-table fab/org-latex-math-commands-abbrev-table))
  (abbrev-mode))

(add-hook 'org-mode-hook 'fab/org-abbrev-mode-setup)
;; We need to call `expand-abbrev` manually, since the characters used here are not word characters and do not trigger automatic expansion.
(advice-add #'org-self-insert-command :before (lambda (&rest r) (unless (org-in-src-block-p) (expand-abbrev))))
(advice-add #'org-return :before (lambda (&rest r) (unless (org-in-src-block-p) (expand-abbrev))))
;; (general-def 'insert org-mode-map
;;   "SPC" '(lambda (N) (interactive "p") (unless (org-in-src-block-p) (expand-abbrev)) (org-self-insert-command N)))

(setq org-confirm-babel-evaluate nil)

(setq org-latex-listings t)
;; TODO: Remove from snipit creation, remove geometry when exporting to beamer
(setq org-latex-packages-alist
      '(("AUTO" "babel" t)
        ("" "listings" t)
        ("" "comment" t)
        ("" "xcolor" t)
        ("a4paper,margin=2cm" "geometry")))

;; Use ppdflatex for nicer compile outputs
(setq org-latex-pdf-process '("latexmk -f -pdf -%latex -pdflatex=\"ppdflatex %%O %%S\" -interaction=nonstopmode -output-directory=%o %f"))

;; Add more files to cleanup
(with-eval-after-load 'ox-latex
  (push "lof" org-latex-logfiles-extensions)
  (push "lot" org-latex-logfiles-extensions))

;; Automatically open PDF File after exporting
(advice-add 'org-latex-export-to-pdf :after
            (lambda (&optional async subtreep visible-only body-only ext-plist)
              (let* ((filename (org-export-output-file-name ".pdf" subtreep))
                     (buffer (or (get-file-buffer filename) (find-file-noselect filename)))
                     (window (get-buffer-window buffer))
                     (split-height-threshold nil)
                     (split-width-threshold 0))
                (cond (window
                       (select-window window))
                      (buffer
                       (switch-to-buffer-other-window buffer))
                      (t
                       (message "Could not open PDF File."))))))

(add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))

(use-package tree-sitter
  :hook (prog-mode . global-tree-sitter-mode) ;; Turn on parsing by tree sitter
  :config
  (remove-hook 'prog-mode-hook #'global-tree-sitter-mode) ;; Remove hook, to avoid double trigger
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode) ;; Turn on highlighting by tree-sitter
  )

(use-package tree-sitter-langs
  :after tree-sitter)

(setq treesit-font-lock-level 4)

(use-package flycheck
  :after lsp-mode
  :config
  ;; Make Error List a bit nicer, by placing it at the bottom of the screen
  (add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
              (display-buffer-reuse-window
               display-buffer-in-side-window)
              (side            . bottom)
              (reusable-frames . visible)
              (window-height   . 0.2)))

  ;; Add better bindings
  (general-def 'normal flycheck-mode-map
    "[ e" 'flycheck-previous-error
    "] e" 'flycheck-next-error
    "[ E" 'flycheck-first-error
    ;; No corresponding last error function, only evil unimpaired one
    ;; "] E" 'evil-collection-unimpaired-last-error
    )
  )

(defface flycheck-error-lens-error-bg
  `((t :background ,(add-to-color (face-attribute 'default :background) 0.2 0.0 0.0) :extend t))
  "Error Lens background face for errors.")

(defface flycheck-error-lens-warning-bg
  `((t :background ,(add-to-color (face-attribute 'default :background) 0.1 0.1 0.0) :extend t))
  "Error Lens background face for warnings.")

(defface flycheck-error-lens-info-bg
  `((t :background ,(add-to-color (face-attribute 'default :background) 0.0 0.1 0.1) :extend t))
  "Error Lens background face for infos.")

(defun fab/flycheck-error-lens-sort-errors-by-line (e1 e2)
  (let ((l1 (flycheck-error-line e1))
        (l2 (flycheck-error-line e2))
        (s1 (flycheck-error-level-severity (flycheck-error-level e1)))
        (s2 (flycheck-error-level-severity (flycheck-error-level e2))))
    (or (< l1 l2)
        (and (= l1 l2) (> s1 s2)))))

(defun fab/flycheck-error-lens-errors-same-line-p (e1 e2)
  (equal (flycheck-error-line e1) (flycheck-error-line e2)))

(defun fab/flycheck-add-error-lens-overlay ()
  "Add error-lens overlay for all errors."
  (let* ((old-ovs (seq-filter
                   (lambda (o) (overlay-get o 'flycheck-error-lens-overlay))
                   (overlays-in (point-min) (point-max))))
         (all-errs flycheck-current-errors)
         (sort-errs (seq-sort #'fab/flycheck-error-lens-sort-errors-by-line all-errs))
         (uniq-errs (seq-uniq sort-errs #'fab/flycheck-error-lens-errors-same-line-p)))
    (dolist (err uniq-errs)
      (unless (flycheck-relevant-error-other-file-p err)
        (pcase-let* ((`(,beg . ,end) (flycheck-error-region-for-mode err 'columns))
                     (line-beg (save-excursion (goto-char beg)
                                               (line-beginning-position)))
                     (line-end (save-excursion (goto-char end)
                                               (line-end-position)))
                     (overlay (make-overlay line-beg (1+ line-end)))
                     (overlay-msg (make-overlay line-end line-end))
                     (message (flycheck-error-message err))
                     (level (flycheck-error-level err))
                     (severity (get level 'flycheck-compilation-level))
                     (priority (pcase severity
                                 (2 '(nil . 110))
                                 (1 '(nil . 100))
                                 (0 '(nil . 90))))
                     (bg-face (pcase severity
                                (2 'flycheck-error-lens-error-bg)
                                (1 'flycheck-error-lens-warning-bg)
                                (0 'flycheck-error-lens-info-bg)))
                     (fg-face (pcase severity
                                (2 'error)
                                (1 'warning)
                                (0 'success))))
          (setf (overlay-get overlay 'flycheck-error-lens-overlay) t)
          (setf (overlay-get overlay 'face) bg-face)
          (setf (overlay-get overlay 'priority) priority)
          (setf (overlay-get overlay-msg 'flycheck-error-lens-overlay) t)
          (setf (overlay-get overlay-msg 'after-string)
                (propertize (concat "   " (seq-elt (string-lines message) 0))
                            'face `(,bg-face ,fg-face)))
          (setf (overlay-get overlay-msg 'priority) priority)
          )))
    (seq-do #'delete-overlay old-ovs)
    ))

(add-hook 'flycheck-after-syntax-check-hook #'fab/flycheck-add-error-lens-overlay)

(use-package flycheck-posframe
  :after flycheck
  :hook (flycheck-mode . flycheck-posframe-mode)
  :config
  (flycheck-posframe-configure-pretty-defaults)
  (setq flycheck-posframe-error-prefix "✖ ") ;; Use a symbol that works with a monospace font
  (set-face-attribute 'flycheck-posframe-info-face nil :foreground 'unspecified :inherit 'success)
  (setq flycheck-posframe-border-width 1)
  (setq flycheck-clear-displayed-errors-function (lambda () (posframe-hide flycheck-posframe-buffer)))

  ;; Overwrite function to show all errors on current line
  (defun flycheck-display-error-at-point ()
    "Display all the error messages at point.

If there are no errors, clears the error messages at point."
    (interactive)
    ;; This function runs from a timer, so we must take care to not ignore any
    ;; errors
    (with-demoted-errors "Flycheck error display error: %s"
      (flycheck-cancel-error-display-error-at-point-timer)
      (when flycheck-mode
        (let ((errors (flycheck-overlay-errors-in (line-beginning-position)
                                                  (line-end-position))))
          (if errors
              (flycheck-display-errors errors)
            (flycheck-clear-displayed-errors))))))

  ;; Better display for errors
  (defun flycheck-posframe-format-error (err)
    "Formats ERR for display."
    (propertize (concat
                 (flycheck-posframe-get-prefix-for-error err)
                 (string-join (string-lines (flycheck-error-message err)) "\n  "))
                'face
                `(:inherit ,(flycheck-posframe-get-face-for-error err))))

)

(add-hook 'prog-mode-hook #'hs-minor-mode)
(setq hs-isearch-open t) ;; Open code and comments when searching
(add-hook 'hs-minor-mode-hook #'hs-hide-initial-comment-block)

;; Problem: Tooltips don't work with LSP-Mode
;; (defun fab/hs-display-code-line-counts (ov)
;;   (when (eq 'code (overlay-get ov 'hs))
;;     (overlay-put ov 'help-echo
;;                  (buffer-substring (overlay-start ov)
;;                                    (overlay-end ov)))))
;; (setq hs-set-up-overlay 'fab/hs-display-code-line-counts)

(defun fab/hideshowvis-delayed-start ()
  (interactive)
  (run-with-timer 1 nil #'hideshowvis-minor-mode)
  (run-with-timer 1 nil #'hideshowvis-symbols))

(use-package hideshowvis
  :load-path "~/.config/emacs/hideshowvis"
  ;; BUG: Enabling minor mode immediately causes some strange bugs with syntax highlighting
  ;; -> Solution: Use delayed activation
  ;; :hook (hs-minor-mode . hideshowvis-minor-mode)
  ;; BUG: hs-mode is also enabled by other modes (like org-mode) which causes hideshowvis to break
  ;; -> Only enable explicitly in LSP Mode
  :init
  (add-hook 'lsp-mode-hook #'fab/hideshowvis-delayed-start)
  )

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((lsp-mode . evil-force-normal-state))
  :init
  (setq lsp-keymap-prefix "C-l")
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;; (setq lsp-signature-auto-activate nil)
  ;; (setq lsp-signature-render-documentation nil)
  (setq lsp-modeline-diagnostics-enable nil) ;; Already provided by flycheck
  (setq lsp-inlay-hint-enable t
        lsp-update-inlay-hints-on-scroll nil ;; TODO / BUG: Enabling immediate updates seems to cause very high cpu usage on split windows. See also: https://github.com/emacs-lsp/lsp-mode/issues/4113
        lsp-idle-delay 0.01) ;; This somewhat compensates for that, by making updates a lot faster.
  (setq lsp-auto-execute-action nil)
  (setq lsp-modeline-code-action-fallback-icon (nerd-icons-codicon "nf-cod-github_action"))
  :config
  (lsp-enable-which-key-integration t)
  (fab/leader-def lsp-mode-map "l" (general-simulate-key "C-l" :which-key "LSP"))
  (general-def 'normal lsp-mode-map
    "C-<return>" 'lsp-find-definition)
  (set-face-attribute 'lsp-face-highlight-textual nil :background "#2F3B46" :foreground 'unspecified :weight 'unspecified)
  )

(defvar-local fab/lsp-format-on-save t "Format `lsp-mode'-managed buffer before save.")

(defun fab/lsp-maybe-format-on-save ()
  (when (and lsp-mode fab/lsp-format-on-save)
    (lsp-format-buffer)))

(add-hook 'lsp-mode-hook (lambda () (add-hook 'before-save-hook #'fab/lsp-maybe-format-on-save nil 'local)))

(use-package yasnippet
  :hook (lsp-mode . yas-minor-mode)
  :config
  (yas-reload-all))

(use-package yasnippet-snippets
  :after yasnippet)

(use-package lsp-ui
  :after lsp-mode
  :config
  (set-face-attribute 'lsp-ui-doc-highlight-hover nil :inherit 'lsp-face-highlight-textual)
  :custom
  (lsp-ui-sideline-delay 0)
  (lsp-ui-sideline-show-code-actions nil)

  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-include-signature 't) ;; TODO: Auswirkung unbekannt
  (lsp-ui-doc-delay 0.5)
  )

(use-package lsp-ivy
  :after lsp-mode
  :config
  ;; Filter out Fields in Structs
  (setq lsp-ivy-filter-symbol-kind '(8))
  (general-def lsp-command-map
    "j" '(fab/lsp-ivy-workspace-symbol-strict :wk "jump"))
  ;; Describtion needs to be added manually, since LSP Mode is weird
  (which-key-add-key-based-replacements "C-l j" "jump"))

(defun fab/lsp-ivy--workspace-symbol-action (sym-string)
  "Jump to the `&SymbolInformation' defined in SYM-STRING."
  (when sym-string
    (lsp-ivy--workspace-symbol-action sym-string)
    (recenter 3)))

(defun fab/lsp-ivy-workspace-symbol-strict (arg)
  "`ivy' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point."
  (interactive "P")
  (fab/lsp-ivy--workspace-symbol-strict (lsp-workspaces)
                                        "Workspace symbol: "
                                        (when arg (thing-at-point 'symbol))))

(defun fab/lsp-ivy--workspace-symbol-strict (workspaces prompt initial-input)
  "Search against WORKSPACES with PROMPT and INITIAL-INPUT."
  (let* ((non-essential t)
         (prev-query nil)
         (unfiltered-candidates '())
         (workspace-root (lsp-workspace-root)))
    (ivy-read
     prompt
     (lambda (user-input)
       (let* ((parts (split-string user-input))
              (query (or (car parts) ""))
              (filter-regexps? (mapcar #'regexp-quote (cdr parts))))
         (unless (string-equal prev-query query)
           (setq unfiltered-candidates
                 (with-lsp-workspaces workspaces
                                      (lsp-request-while-no-input
                                       "workspace/symbol"
                                       (lsp-make-workspace-symbol-params :query query)))))
         (setq prev-query query)
         (--keep (and ;; This here is my custom code
                  (string-prefix-p
                   (concat "file://" workspace-root)
                   ;; (gethash "uri" (gethash "location" it)))
                   (plist-get (plist-get it ':location) ':uri))
                  (lsp-ivy--transform-candidate it filter-regexps? workspace-root))
                 unfiltered-candidates)))
     :dynamic-collection t
     :require-match t
     :initial-input initial-input
     :action #'fab/lsp-ivy--workspace-symbol-action
     :update-fn 'auto
     :caller 'lsp-ivy-workspace-symbol)))

(add-hook 'c-mode-common-hook 'lsp-deferred)

(use-package go-mode
  :mode "\\.go\\'"
  :hook (go-mode . lsp-deferred))

(use-package rustic
  :hook (rustic-mode . lsp-deferred)
  :init
  (setq rust-mode-treesitter-derive nil)
  (setq rustic-format-trigger 'on-save)
  :config
  (setq lsp-rust-analyzer-cargo-watch-command "clippy"))

(use-package sh-script
  :hook (sh-mode . lsp-deferred)
  :init
  (setq lsp-bash-explainshell-endpoint "http://localhost:5000"))

(add-hook 'python-mode-hook #'lsp-deferred)

(setq lsp-pylsp-plugins-black-enabled t
      lsp-pylsp-plugins-isort-enabled t
      lsp-pylsp-plugins-pylint-enabled t)

(use-package elisp-check
  :load-path "~/.config/emacs/elisp-check"
  :autoload elisp-check-run)

(use-package auctex
  :hook (((LaTeX-mode latex-mode) . lsp-deferred)
         ((LaTeX-mode latex-mode) . TeX-source-correlate-mode))
  :init
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil))

(use-package company-auctex
  :after (auctex company)
  :config
  (company-auctex-init))

(use-package reftex
  ;; :hook ((latex-mode LaTeX-mode) . reftex-mode)
  :after auctex
  :init
  (setq reftex-plug-into-AUCTeX t)
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex) ;; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex) ;; with Emacs latex mode
  )

(add-hook 'latex-mode-hook 'toggle-word-wrap)
(add-hook 'LaTeX-mode-hook 'toggle-word-wrap)

(defun fab/latex-prettify-symbols-setup ()
  (setq prettify-symbols-unprettify-at-point 't)
  (push '("\\hyph{}" . ?-) prettify-symbols-alist)
  (prettify-symbols-mode))

(add-hook 'latex-mode-hook 'fab/latex-prettify-symbols-setup)
(add-hook 'LaTeX-mode-hook 'fab/latex-prettify-symbols-setup)

(use-package cdlatex
  :hook ((latex-mode LaTeX-mode) . cdlatex-mode)
  :config
  (setq cdlatex-auto-help-delay 0))

(advice-add #'cdlatex-turn-on-help :after
            (lambda (&rest r)
              (quit-windows-on " *CDLaTeX Help*" nil t)
              (posframe-show " *CDLaTeX Help*"
                             :poshandler 'posframe-poshandler-point-window-center
                             :border-width 1
                             :border-color "#ffffff")))

(advice-add #'cdlatex-read-char-with-help :after (lambda (&rest r) (posframe-hide " *CDLaTeX Help*")))
(advice-add #'cdlatex-math-modify :after (lambda (&rest r) (posframe-hide " *CDLaTeX Help*")))

(use-package pdf-tools
  :defer t ;; Package is loaded by `pdf-loader-install` on demand
  :init
  (pdf-loader-install t t) ;; Automatically installs server binary, if needed
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  :config
  ;; WARNING: Code here may be executed twice. See also: https://github.com/emacs-evil/evil-collection/issues/752
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'pdf-view-mode-hook (lambda () (setq cursor-in-non-selected-windows nil)))
  (add-hook 'pdf-view-mode-hook #'pdf-view-auto-slice-minor-mode))

(defun pdf-tools-rebuild-server ()
  "Force the rebuild of the server binary.
Usefull if an update broke a dependency and the server needs to be rebuild."
  (interactive)
  (require 'pdf-tools)
  (delete-file pdf-info-epdfinfo-program)
  (pdf-tools-install t t))

(add-to-list 'recentf-exclude ".*\\.pdf")

(use-package jupyter
  :after org
  :custom
  (org-babel-load-languages (append org-babel-load-languages '((jupyter . t))))
  :config
  (setq jupyter-repl-echo-eval-p 't)
  (setq jupyter-eval-use-overlays 't)
  (setq org-babel-jupyter-resource-directory (no-littering-expand-var-file-name "ob-jupyter/"))

  (add-to-list 'org-structure-template-alist '("jpy" . "src jupyter-python"))
  (setq org-babel-default-header-args:jupyter-python '((:kernel . "python3")
                                                       (:session . "org-py")
                                                       ;; (:pandoc . t)
                                                       ))
  (advice-add 'org-babel-execute-src-block :after
              (lambda (&rest r) (org-redisplay-inline-images)))

  ;; Redifine function, since ansi-color--find-face has been renamed and apply-on-region has new functionality
  ;; MAY BREAK in Future!
  ;; (defun jupyter-ansi-color-apply-on-region (begin end)
  ;;   (ansi-color-apply-on-region begin end t))
  (defun display-all-ansi-colors ()
    "Fixes kernel output in emacs-jupyter"
    (ansi-color-apply-on-region (point-min) (point-max) t))
  (add-hook 'org-babel-after-execute-hook #'display-all-ansi-colors)
  )

(use-package tabnine
  :hook (kill-emacs . tabnine-kill-process))

;; Requirements for Copilot
(use-package editorconfig)
(use-package jsonrpc)

(use-package copilot
  :load-path "~/.config/emacs/copilot.el"
  :config
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))

;; Optional dependency for better HTTP Requests
(use-package plz)

(use-package go-translate
  :config
  (setq gt-langs '(en de))
  (setq gt-default-translator
        (gt-translator
         :engines (gt-google-engine)
         :render (gt-posframe-pin-render
                  :frame-params (list :border-width 1
                                      :border-color "white"
                                      :cursor t
                                      :window-point 0))))

  (setq gt-buffer-render-evil-leading-key nil)

  (advice-add #'gt-do-translate :after
              (lambda (&rest r)
                (when (and (get-buffer gt-posframe-pin-render-buffer) gt-posframe-pin-render-frame)
                  (x-focus-frame gt-posframe-pin-render-frame)
                  (with-current-buffer gt-posframe-pin-render-buffer
                    (evil-force-normal-state)
                    (variable-pitch-mode 1)
                    (visual-line-mode 1)))))
  )

(with-eval-after-load 'ispell
  (defun ispell-display-buffer (buffer)
    "Show BUFFER in new window above selected one.
Also position fit window to BUFFER and select it."
    (if (and (functionp 'posframe-workable-p) (posframe-workable-p))
        (progn
          (posframe-show buffer
                         :poshandler 'posframe-poshandler-point-window-center
                         :border-width 1
                         :border-color "#ffffff")
          ;; (posframe--fit-frame-to-buffer (buffer-local-value 'posframe--frame buffer) nil nil nil nil t)
          (posframe-refresh buffer))
      (let* ((window
              (or (get-buffer-window buffer)
                  (condition-case nil
                      (split-window
                       ;; See comment in original function.
                       (car (last (selected-window-group)))
                       (- ispell-choices-win-default-height)
                       'below)
                    (error nil))
                  (display-buffer buffer))))
        (if (not window)
            (error "Couldn't make window for *Choices*")
          (select-window window)
          (set-window-buffer window buffer)
          (set-window-point window (point-min))
          (fit-window-to-buffer window nil nil nil nil t))))))

(add-hook 'flyspell-mode-hook 'flyspell-buffer)
(defun flyspell-restart ()
  "Restart Flyspell Mode."
  (interactive)
  (flyspell-mode -1)
  (flyspell-mode 1))
